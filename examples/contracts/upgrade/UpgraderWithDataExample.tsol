pragma ever-solidity >= 0.61.2;

pragma AbiHeader time;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "../../../contracts/access/abstract/Ownable.tsol";

import "../../../contracts/factory/abstract/Factory.tsol";

import "../../../contracts/libraries/UtilityErrors.tsol";
import "../../../contracts/libraries/UtilityGas.tsol";

import "../../../contracts/upgrade/abstract/Upgrader.tsol";
import "../../../contracts/upgrade/interfaces/IUpgradableByRequestWithData.tsol";

import "../factory/FactoryInstance.tsol";

contract UpgraderWithDataExample is Factory, Upgrader, Ownable {
    uint32 private static _nonce;

    function _getTargetBalanceInternal()
        internal
        view
        override (Factory, Upgrader, Ownable)
        returns (uint128)
    {
        return UtilityGas.INITIAL_BALANCE;
    }

    constructor(
        optional(address) _initialOwner,
        optional(address) _remainingGasTo
    )
        public
        reserveAcceptAndRefund(_getTargetBalanceInternal(), _remainingGasTo, msg.sender)
        validAddressOrNull(_initialOwner, UtilityErrors.INVALID_NEW_OWNER)
    {
        address initialOwner = _initialOwner.hasValue() ? _initialOwner.get() : msg.sender;

        _setOwnerInternal(initialOwner);
    }

    function getDeployParams(uint32 _id)
        external
        pure
        responsible
        returns (TvmCell)
    {
        return {
            value: 0,
            flag: MsgFlag.REMAINING_GAS,
            bounce: false
        } abi.encode(_id);
    }

    function deploy(
        TvmCell _deployParams,
        optional(address) _remainingGasTo
    )
        external
        override
        reserveAndRefund(_getTargetBalanceInternal(), _remainingGasTo, msg.sender)
        validTvmCell(_deployParams, UtilityErrors.INVALID_DEPLOY_PARAMS)
        validAddressOrNull(_remainingGasTo, UtilityErrors.INVALID_GAS_RECIPIENT)
    {
        TvmCell data = tvm.buildStateInit({
            code: _getInstanceCodeInternal(),
            contr: FactoryInstance,
            pubkey: 0,
            varInit: {
                _id: abi.decode(_deployParams, uint32),
                _factory: address(this)
            }
        });

        address instance = new FactoryInstance{
            stateInit: data,
            value: 2 ever,
            flag: MsgFlag.SENDER_PAYS_FEES,
            bounce: false
        }(_remainingGasTo.hasValue() ? _remainingGasTo.get() : msg.sender);

        emit InstanceDeployed(
            instance,
            _deployParams,
            _getInstanceVersionInternal(),
            tvm.hash(_getInstanceCodeInternal()),
            msg.sender
        );
    }

    function provideUpgrade(
        uint32 _instanceVersion,
        TvmCell _deployParams,
        address _remainingGasTo
    )
        external
        view
        override
        reserve(_getTargetBalanceInternal())
        validTvmCell(_deployParams, UtilityErrors.INVALID_DEPLOY_PARAMS)
        validAddress(_remainingGasTo, UtilityErrors.INVALID_GAS_RECIPIENT)
    {
        require(
            _getInstanceAddressInternal(_deployParams) == msg.sender,
            UtilityErrors.CALLER_IS_NOT_INSTANCE
        );

        (uint32 version, TvmCell code) = _getParamsForUpgradeInternal();

        // Upgrade to last version if contract's version is different
        if (_instanceVersion != version) {
            IUpgradableByRequestWithData(msg.sender)
                .upgrade{
                    value: 0,
                    flag: MsgFlag.ALL_NOT_RESERVED,
                    bounce: false
                }(
                    version,
                    code,
                    abi.encode(uint32(123)),
                    _remainingGasTo
                );
        } else {
            _remainingGasTo.transfer({
                value: 0,
                flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS,
                bounce: false
            });
        }
    }

    function _getInstanceAddressInternal(TvmCell _deployParams)
        internal
        view
        override (Factory, Upgrader)
        returns (address)
    {
        return address(
            tvm.hash(
                tvm.buildStateInit({
                    code: _getInstanceCodeInternal(),
                    contr: FactoryInstance,
                    pubkey: 0,
                    varInit: {
                        _id: abi.decode(_deployParams, uint32),
                        _factory: address(this)
                    }
                })
            )
        );
    }

    function _getParamsForUpgradeInternal()
        internal
        view
        override
        returns (uint32, TvmCell)
    {
        return (
            _getInstanceVersionInternal(),
            _getInstanceCodeInternal()
        );
    }
}
